import attribute_info {
    AttributeInfo,
    CodeAttributeInfo,
    Condition,
    ExceptionTableEntry,
    Instruction,
    UnknownAttributeInfo
}
import field_info { FieldInfo }
import method_info { MethodInfo }
import constant_pool { ConstantPool, ConstantPoolInfo, ConstantPoolTag }

struct ClassFile {
    magic: u32 = 0
    minor_version: u16 = 0
    major_version: u16 = 0
    constant_pool: ConstantPool
    access_flags: u16 = 0
    this_class: u16 = 0
    super_class: u16 = 0
    interfaces_count: u16 = 0
    interfaces: [u16]
    fields_count: u16 = 0
    fields: [FieldInfo]
    methods_count: u16 = 0
    methods: [MethodInfo]
    attributes_count: u16 = 0
    attributes: [AttributeInfo]

    fn is_public(this) -> bool {
        return (.access_flags & 0x0001) != 0
    }

    fn is_final(this) -> bool {
        return (.access_flags & 0x0010) != 0
    }

    fn is_super(this) -> bool {
        return (.access_flags & 0x0020) != 0
    }
    
    fn is_interface(this) -> bool {
        return (.access_flags & 0x0200) != 0
    }

    fn is_abstract(this) -> bool {
        return (.access_flags & 0x0400) != 0
    }

    fn is_synthetic(this) -> bool {
        return (.access_flags & 0x1000) != 0
    }

    fn is_annotation(this) -> bool {
        return (.access_flags & 0x2000) != 0
    }

    fn is_enum(this) -> bool {
        return (.access_flags & 0x4000) != 0
    }

    fn is_module(this) -> bool {
        return (.access_flags & 0x8000) != 0
    }
}

class Parser {
    public data: ArraySlice<u8>
    public index: usize

    public fn take(mut this, anon size: usize) throws -> ArraySlice<u8> {
        let result = .data[.index..(.index + size)]
        .index += size
        return result
    }

    public fn take_u8(mut this) throws -> u8 {
        return .data[.index++]
    }

    public fn take_i8(mut this) throws -> i8 {
        // FIXME: This should not be allowed in a safe context - but given that
        // there is no other way to do unchecked casts it is useful here.
        let result: i8 = .data[.index++]

        return result
    }

    public fn take_u16(mut this) throws -> u16 {
        return .take_t<u16>()
    }

    public fn take_i16(mut this) throws -> i16 {
        return .take_t<i16>()
    }

    public fn take_u32(mut this) throws -> u32 {
        return .take_t<u32>()
    } 

    fn take_t<T>(mut this) throws -> T {
        let bytes = .take(sizeof(T))

        mut result: T = 0
        for i in 0..bytes.size() {
            result = result << 8 | bytes[i]
        }

        return result
    }
}

class CodeParser: Parser {
    public fn create(data: ArraySlice<u8>) throws -> CodeParser {
        return CodeParser(data, index: 0)
    }

    public fn parse(mut this) throws -> [Instruction] {
        mut instructions: [Instruction] = []

        while .index < .data.size() {
            let opcode = .take_u8()
            match opcode {
                0x0 => instructions.push(Instruction::Nop)
                0x3 => instructions.push(Instruction::BiPush(0))
                0x6 => instructions.push(Instruction::BiPush(3))
                0x12 => instructions.push(Instruction::Ldc(.take_u8()))
                0x1b => instructions.push(Instruction::ILoad(1))
                0x2a => instructions.push(Instruction::ALoad(0))
                0x2b => instructions.push(Instruction::ALoad(1))
                0x2c => instructions.push(Instruction::ALoad(2))
                0x2d => instructions.push(Instruction::ALoad(3))
                0x3c => instructions.push(Instruction::IStore(1))
                0x4b => instructions.push(Instruction::AStore(0))
                0x4c => instructions.push(Instruction::AStore(1))
                0x4d => instructions.push(Instruction::AStore(2))
                0x4e => instructions.push(Instruction::AStore(3))
                0x59 => instructions.push(Instruction::Dup)
                0x84 => instructions.push(Instruction::IInc(index: .take_u8(), constant: .take_i8()))
                0x9e => instructions.push(Instruction::If(cond: Condition::LessOrEqual, branch: .take_i16()))
                0xa2 => instructions.push(Instruction::IfICmp(cond: Condition::GreaterOrEqual, branch: .take_u16()))
                0xa7 => instructions.push(Instruction::GoTo(.take_i16()))
                0xb1 => instructions.push(Instruction::Return)
                0xb2 => instructions.push(Instruction::GetStatic(.take_u16()))
                0xb4 => instructions.push(Instruction::GetField(.take_u16()))
                0xb5 => instructions.push(Instruction::PutField(.take_u16()))
                0xb6 => instructions.push(Instruction::InvokeVirtual(.take_u16()))
                0xb7 => instructions.push(Instruction::InvokeSpecial(.take_u16()))
                0xbb => instructions.push(Instruction::New(.take_u16()))
                else => {
                    eprintln("Unimplemented opcode: 0x{:01x}", opcode)
                    throw Error::from_string_literal("Unimplemented opcode")
                }
            }
        }

        return instructions
    }
}

class ClassFileParser: Parser {
    comptime MAGIC() => 0xCAFEBABEu32
    comptime MAX_SUPPORTED_MAJOR_VERSION() => 61u16 // Java 17

    class_file: ClassFile

    public fn create(data: ArraySlice<u8>) throws -> ClassFileParser {
        return ClassFileParser(
            data,
            index: 0
            class_file: ClassFile(
                constant_pool: ConstantPool(items: [:]),
                interfaces: [],
                fields: [],
                methods: [],
                attributes: [],
            )
        )
    }

    public fn parse(mut this) throws -> ClassFile {
        .parse_magic()
        .parse_version()
        .parse_constant_pool()
        .parse_access_flags()
        .parse_this_class()
        .parse_super_class()
        .parse_interfaces()
        .parse_fields()
        .parse_methods()
        .parse_class_attributes()

        return .class_file
    }

    private fn parse_magic(mut this) throws {
        .class_file.magic = .take_u32()

        if .class_file.magic != MAGIC() {
            throw Error::from_string_literal("Not a class file")
        }
    }

    private fn parse_version(mut this) throws {
        .class_file.minor_version = .take_u16()
        .class_file.major_version = .take_u16()

        if .class_file.major_version > MAX_SUPPORTED_MAJOR_VERSION() {
            throw Error::from_string_literal("Unsupported class file version")
        }
    }

    private fn parse_constant_pool(mut this) throws {
        let constant_pool_count = .take_u16()
        mut constant_pool_items: [u16:ConstantPoolInfo] = [:]
        constant_pool_items.ensure_capacity((constant_pool_count - 1) as! usize)

        for index in 1..constant_pool_count {
            .parse_constant_pool_info(index, items: constant_pool_items)
        }

        .class_file.constant_pool = ConstantPool(items: constant_pool_items)
    }

    private fn parse_constant_pool_info(mut this, index: u16, mut items: [u16:ConstantPoolInfo]) throws {
        let tag = .take_u8()
        match (tag) {
            (ConstantPoolTag::Utf8 as! u8) => {
                let length = .take_u16()
                let bytes = .take(length as! usize).to_array()

                items[index] = ConstantPoolInfo::Utf8(
                    tag: ConstantPoolTag::Utf8
                    length
                    bytes
                )
            }
            (ConstantPoolTag::Integer as! u8) => {
                items[index] = ConstantPoolInfo::Integer(
                    tag: ConstantPoolTag::Integer
                    value: .take_u32()
                )
            }
            (ConstantPoolTag::Class as! u8) => {
                items[index] = ConstantPoolInfo::Class(
                    tag: ConstantPoolTag::Class
                    name_index: .take_u16()
                )
            }
            (ConstantPoolTag::String as! u8) => {
                items[index] = ConstantPoolInfo::String(
                    tag: ConstantPoolTag::String
                    string_index: .take_u16()
                )
            }
            (ConstantPoolTag::FieldRef as! u8) => {
                items[index] = ConstantPoolInfo::FieldRef(
                    tag: ConstantPoolTag::FieldRef
                    class_index: .take_u16()
                    name_and_type_index: .take_u16()
                )
            }
            (ConstantPoolTag::MethodRef as! u8) => {
                items[index] = ConstantPoolInfo::MethodRef(
                    tag: ConstantPoolTag::MethodRef
                    class_index: .take_u16()
                    name_and_type_index: .take_u16()
                )
            }
            (ConstantPoolTag::NameAndType as! u8) => {
                items[index] = ConstantPoolInfo::NameAndType(
                    tag: ConstantPoolTag::NameAndType
                    name_index: .take_u16()
                    descriptor_index: .take_u16()
                )
            }
            else => {
                eprintln("Unsupported constant pool tag: {}", tag)
                throw Error::from_string_literal("Unsupported constant pool tag")
            }
        }
    }

    private fn parse_access_flags(mut this) throws {
        .class_file.access_flags = .take_u16()
    }

    private fn parse_this_class(mut this) throws {
        .class_file.this_class = .take_u16()

        guard .class_file.constant_pool.get(.class_file.this_class) is Some (this_class) else {
            throw Error::from_string_literal("Invalid this class index")
        }

        if not this_class is Class {
            throw Error::from_string_literal("Invalid this class index")
        }
    }

    private fn parse_super_class(mut this) throws {
        .class_file.super_class = .take_u16()

        guard .class_file.constant_pool.get(.class_file.super_class) is Some (super_class) else {
            if .class_file.super_class != 0 {
                throw Error::from_string_literal("Invalid super class index")
            }

            return
        }

        if not super_class is Class {
            throw Error::from_string_literal("Invalid super class index")
        }
    }

    fn parse_interfaces(mut this) throws {
        .class_file.interfaces_count = .take_u16()
        .class_file.interfaces = [0; .class_file.interfaces_count]

        for index in 0...class_file.interfaces_count {
            .parse_interface(index)
        }
    }

    fn parse_interface(mut this, index: u16) throws {
        .class_file.interfaces[index] = .take_u16()

        guard .class_file.constant_pool.get(.class_file.interfaces[index]) is Some (interface) else {
            throw Error::from_string_literal("Invalid interface index")
        }

        if not interface is Class {
            throw Error::from_string_literal("Invalid interface index")
        }
    }

    fn parse_fields(mut this) throws {
        .class_file.fields_count = .take_u16()
        .class_file.fields.ensure_capacity(.class_file.fields_count as! usize)

        for index in 0...class_file.fields_count {
            .parse_field()
        }
    }

    fn parse_field(mut this) throws {
        let field = FieldInfo(
            access_flags: .take_u16()
            name_index: .take_u16()
            descriptor_index: .take_u16()
            attributes_count: .take_u16()
            attributes: []
        )
        .parse_attributes(attributes: field.attributes, count: field.attributes_count)

        .class_file.fields.push(field)
    }

    fn parse_methods(mut this) throws {
        .class_file.methods_count = .take_u16()
        .class_file.methods.ensure_capacity(.class_file.methods_count as! usize)

        for index in 0...class_file.methods_count {
            .parse_method()
        }
    }

    fn parse_method(mut this) throws {
        let method = MethodInfo(
            access_flags: .take_u16()
            name_index: .take_u16()
            descriptor_index: .take_u16()
            attributes_count: .take_u16()
            attributes: []
        )
        .parse_attributes(attributes: method.attributes, count: method.attributes_count)

        .class_file.methods.push(method)
    }

    fn parse_class_attributes(mut this) throws {
        .class_file.attributes_count = .take_u16()
        .parse_attributes(
            attributes: .class_file.attributes
            count: .class_file.attributes_count
        )
    }

    fn parse_attributes(mut this, mut attributes: [AttributeInfo], count: u16) throws {
        attributes.ensure_capacity(count as! usize)

        for index in 0..count {
            .parse_attribute(attributes)
        }
    }

    fn parse_attribute(mut this, mut attributes: [AttributeInfo]) throws {
        let attribute_name_index = .take_u16()
        let attribute_length = .take_u32()

        guard .class_file.constant_pool.get_utf8(attribute_name_index) is Some (attribute_name) else {
            throw Error::from_string_literal("Invalid attribute name index")
        }

        match attribute_name {
            "Code" => {
                let max_stack = .take_u16()
                let max_locals = .take_u16()
                let code_length = .take_u32()
                mut code_parser = CodeParser::create(data: .take(code_length as! usize))
                let code = code_parser.parse()

                let exception_table_length = .take_u16()
                let exception_table: [ExceptionTableEntry] = []
                .parse_exception_table(exception_table, count: exception_table_length)

                let attributes_count = .take_u16()
                let code_attributes: [AttributeInfo] = []
                .parse_attributes(attributes: code_attributes, count: attributes_count)

                attributes.push(AttributeInfo::Code(CodeAttributeInfo(
                    attribute_name_index
                    attribute_length
                    max_stack
                    max_locals
                    code_length
                    code
                    exception_table_length
                    exception_table
                    attributes_count
                    attributes: code_attributes
                )))
            }
            else => {
                attributes.push(AttributeInfo::Unknown(UnknownAttributeInfo(
                    attribute_name_index
                    attribute_length
                    info: .take(attribute_length as! usize).to_array()
                )))
            }
        }
    }

    fn parse_exception_table(mut this, mut exception_table: [ExceptionTableEntry], count: u16) throws {
        exception_table.ensure_capacity(count as! usize)

        for index in 0..count {
            exception_table.push(ExceptionTableEntry(
                start_pc: .take_u16()
                end_pc: .take_u16()
                handler_pc: .take_u16()
                catch_type: .take_u16()
            ))
        }
    }
}
